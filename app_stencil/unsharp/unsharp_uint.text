module name=output, target=x86-64-linux-avx-avx2-f16c-fma-sse41
external_plus_metadata func output (input, output) {
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.type = _halide_buffer_get_type(input.buffer)
let input.dimensions = _halide_buffer_get_dimensions(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.extent.0 = _halide_buffer_get_extent(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let input.min.2 = _halide_buffer_get_min(input.buffer, 2)
let input.extent.2 = _halide_buffer_get_extent(input.buffer, 2)
let input.stride.2 = _halide_buffer_get_stride(input.buffer, 2)
let output = _halide_buffer_get_host(output.buffer)
let output.type = _halide_buffer_get_type(output.buffer)
let output.dimensions = _halide_buffer_get_dimensions(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
let output.min.2 = _halide_buffer_get_min(output.buffer, 2)
let output.extent.2 = _halide_buffer_get_extent(output.buffer, 2)
let output.stride.2 = _halide_buffer_get_stride(output.buffer, 2)
let input.extent.2.required = (max((output.extent.2 + output.min.2), 3) - min(output.min.2, 0))
assert((!_halide_buffer_is_bounds_query(input.buffer) || ((0 <= output.min.0) && ((output.extent.0 + output.min.0) <= 8))), halide_error_constraints_make_required_region_smaller("Input buffer input", 0, 0, 15, output.min.0, ((output.extent.0 + output.min.0) + 7)))
assert((!_halide_buffer_is_bounds_query(input.buffer) || ((0 <= output.min.1) && ((output.extent.1 + output.min.1) <= 8))), halide_error_constraints_make_required_region_smaller("Input buffer input", 1, 0, 15, output.min.1, ((output.extent.1 + output.min.1) + 7)))
assert((!_halide_buffer_is_bounds_query(input.buffer) || ((0 <= output.min.2) && ((min(output.min.2, 0) + input.extent.2.required) <= 3))), halide_error_constraints_make_required_region_smaller("Input buffer input", 2, 0, 2, min(output.min.2, 0), ((min(output.min.2, 0) + input.extent.2.required) + -1)))
if (_halide_buffer_is_bounds_query(input.buffer)) {
  _halide_buffer_init(input.buffer, _halide_buffer_get_shape(input.buffer), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 1, 8, 3, make_struct((halide_dimension_t *), 0, 16, 1, 0, 0, 16, 16, 0, 0, 3, 256, 0), (uint64)0)
}
if (_halide_buffer_is_bounds_query(output.buffer)) {
  _halide_buffer_init(output.buffer, _halide_buffer_get_shape(output.buffer), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 1, 16, 3, make_struct((halide_dimension_t *), output.min.0, output.extent.0, 1, 0, output.min.1, output.extent.1, output.extent.0, 0, output.min.2, output.extent.2, (output.extent.0*output.extent.1), 0), (uint64)0)
}
if (!(_halide_buffer_is_bounds_query(input.buffer) || _halide_buffer_is_bounds_query(output.buffer))) {
  assert((input.type == (uint32)67585), halide_error_bad_type("Input buffer input", input.type, (uint32)67585))
  assert((input.dimensions == 3), halide_error_bad_dimensions("Input buffer input", input.dimensions, 3))
  assert((output.type == (uint32)69633), halide_error_bad_type("Output buffer output", output.type, (uint32)69633))
  assert((output.dimensions == 3), halide_error_bad_dimensions("Output buffer output", output.dimensions, 3))
  assert(((input.min.0 <= output.min.0) && (((output.extent.0 + output.min.0) + 8) <= (input.extent.0 + input.min.0))), halide_error_access_out_of_bounds("Input buffer input", 0, output.min.0, ((output.extent.0 + output.min.0) + 7), input.min.0, ((input.extent.0 + input.min.0) + -1)))
  assert((0 <= input.extent.0), halide_error_buffer_extents_negative("Input buffer input", 0, input.extent.0))
  assert(((input.min.1 <= output.min.1) && (((output.extent.1 + output.min.1) + 8) <= (input.extent.1 + input.min.1))), halide_error_access_out_of_bounds("Input buffer input", 1, output.min.1, ((output.extent.1 + output.min.1) + 7), input.min.1, ((input.extent.1 + input.min.1) + -1)))
  assert((0 <= input.extent.1), halide_error_buffer_extents_negative("Input buffer input", 1, input.extent.1))
  assert(((input.min.2 <= min(output.min.2, 0)) && ((min(output.min.2, 0) + input.extent.2.required) <= (input.extent.2 + input.min.2))), halide_error_access_out_of_bounds("Input buffer input", 2, min(output.min.2, 0), ((min(output.min.2, 0) + input.extent.2.required) + -1), input.min.2, ((input.extent.2 + input.min.2) + -1)))
  assert((0 <= input.extent.2), halide_error_buffer_extents_negative("Input buffer input", 2, input.extent.2))
  assert((0 <= output.extent.0), halide_error_buffer_extents_negative("Output buffer output", 0, output.extent.0))
  assert((0 <= output.extent.1), halide_error_buffer_extents_negative("Output buffer output", 1, output.extent.1))
  assert((0 <= output.extent.2), halide_error_buffer_extents_negative("Output buffer output", 2, output.extent.2))
  assert((input.stride.0 == 1), halide_error_constraint_violated("input.stride.0", input.stride.0, "1", 1))
  assert((input.min.0 == 0), halide_error_constraint_violated("input.min.0", input.min.0, "0", 0))
  assert((input.extent.0 == 16), halide_error_constraint_violated("input.extent.0", input.extent.0, "16", 16))
  assert((input.stride.1 == 16), halide_error_constraint_violated("input.stride.1", input.stride.1, "16", 16))
  assert((input.min.1 == 0), halide_error_constraint_violated("input.min.1", input.min.1, "0", 0))
  assert((input.extent.1 == 16), halide_error_constraint_violated("input.extent.1", input.extent.1, "16", 16))
  assert((input.stride.2 == 256), halide_error_constraint_violated("input.stride.2", input.stride.2, "256", 256))
  assert((input.min.2 == 0), halide_error_constraint_violated("input.min.2", input.min.2, "0", 0))
  assert((input.extent.2 == 3), halide_error_constraint_violated("input.extent.2", input.extent.2, "3", 3))
  assert((output.stride.0 == 1), halide_error_constraint_violated("output.stride.0", output.stride.0, "1", 1))
  let output.total_extent.1 = (int64(output.extent.1)*int64(output.extent.0))
  let output.total_extent.2 = (output.total_extent.1*int64(output.extent.2))
  assert((abs(int64(output.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("output", abs(int64(output.extent.0)), (uint64)2147483647))
  assert((abs((int64(output.extent.1)*int64(output.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("output", abs((int64(output.extent.1)*int64(output.stride.1))), (uint64)2147483647))
  assert((output.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("output", output.total_extent.1, (int64)2147483647))
  assert((abs((int64(output.extent.2)*int64(output.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("output", abs((int64(output.extent.2)*int64(output.stride.2))), (uint64)2147483647))
  assert((output.total_extent.2 <= (int64)2147483647), halide_error_buffer_extents_too_large("output", output.total_extent.2, (int64)2147483647))
  assert((input != reinterpret((void *), (uint64)0)), halide_error_host_is_null("Input buffer input"))
  assert((output != reinterpret((void *), (uint64)0)), halide_error_host_is_null("Output buffer output"))
  realize gray([output.min.0, (output.extent.0 + 8)], [output.min.1, (output.extent.1 + 8)]) {
    produce gray {
      for (gray.s0.y, output.min.1, (output.extent.1 + 8)) {
        for (gray.s0.x, output.min.0, (output.extent.0 + 8)) {
          gray(gray.s0.x, gray.s0.y) = uint8((((uint16(input(gray.s0.x, gray.s0.y, 2))*(uint16)29) + ((uint16(input(gray.s0.x, gray.s0.y, 0))*(uint16)77) + (uint16(input(gray.s0.x, gray.s0.y, 1))*(uint16)150)))/(uint16)256))
        }
      }
    }
    realize sum_x([output.min.0, output.extent.0], [output.min.1, output.extent.1]) {
      produce sum_x {
        for (sum_x.s0.y, output.min.1, output.extent.1) {
          for (sum_x.s0.x, output.min.0, output.extent.0) {
            sum_x(sum_x.s0.x, sum_x.s0.y) = (uint32)0
          }
        }
        consume gray {
          for (sum_x.s1.y, output.min.1, output.extent.1) {
            for (sum_x.s1.x, output.min.0, output.extent.0) {
              for (sum_x.s1.win2$y, 0, 9) {
                for (sum_x.s1.win2$x, 0, 9) {
                  sum_x(sum_x.s1.x, sum_x.s1.y) = (sum_x(sum_x.s1.x, sum_x.s1.y) + ((uint32(gray((sum_x.s1.win2$x + sum_x.s1.x), (sum_x.s1.win2$y + sum_x.s1.y)))*uint32(uint8((exp_f32((float32(((4 - sum_x.s1.win2$x)*(sum_x.s1.win2$x + -4)))*0.222222f))*67.972794f))))*uint32(uint8((exp_f32((float32(((4 - sum_x.s1.win2$y)*(sum_x.s1.win2$y + -4)))*0.222222f))*67.972794f)))))
                }
              }
            }
          }
        }
      }
      realize blur_x([output.min.0, output.extent.0], [output.min.1, output.extent.1]) {
        produce blur_x {
          consume sum_x {
            for (blur_x.s0.y, output.min.1, output.extent.1) {
              for (blur_x.s0.x, output.min.0, output.extent.0) {
                blur_x(blur_x.s0.x, blur_x.s0.y) = uint8((sum_x(blur_x.s0.x, blur_x.s0.y)/(uint32)65536))
              }
            }
          }
        }
        realize sharpen([output.min.0, output.extent.0], [output.min.1, output.extent.1]) {
          produce sharpen {
            consume blur_x {
              consume gray {
                for (sharpen.s0.y, output.min.1, output.extent.1) {
                  for (sharpen.s0.x, output.min.0, output.extent.0) {
                    sharpen(sharpen.s0.x, sharpen.s0.y) = uint8(min(((uint16(gray(sharpen.s0.x, sharpen.s0.y))*(uint16)2) - uint16(blur_x(sharpen.s0.x, sharpen.s0.y))), (uint16)255))
                  }
                }
              }
            }
          }
          realize ratio([output.min.0, output.extent.0], [output.min.1, output.extent.1]) {
            produce ratio {
              consume sharpen {
                consume gray {
                  for (ratio.s0.y, output.min.1, output.extent.1) {
                    for (ratio.s0.x, output.min.0, output.extent.0) {
                      ratio(ratio.s0.x, ratio.s0.y) = uint8(min(((uint16(sharpen(ratio.s0.x, ratio.s0.y))*(uint16)32)/uint16(max(gray(ratio.s0.x, ratio.s0.y), (uint8)1))), (uint16)255))
                    }
                  }
                }
              }
            }
            produce output {
              consume ratio {
                for (output.s0.c, output.min.2, output.extent.2) {
                  for (output.s0.y, output.min.1, output.extent.1) {
                    for (output.s0.x, output.min.0, output.extent.0) {
                      output(output.s0.x, output.s0.y, output.s0.c) = min(((uint16(ratio(output.s0.x, output.s0.y))*uint16(input((output.s0.x + 4), (output.s0.y + 4), output.s0.c)))/(uint16)32), (uint16)255)
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
}



// On linux, you can compile and run it like so:
// g++ blur.cpp -g -std=c++11 -I /curr/jiajieli/Halide/include -I /curr/jiajieli/Halide/tools -L /curr/jiajieli/Halide/bin -lHalide `libpng-config --cflags --ldflags` -ljpeg -lpthread -ldl -o blur
// LD_LIBRARY_PATH=/curr/jiajieli/Halide/bin /curr/jiajieli/Halide/apps/blur/blur
#include "Halide.h"
#include "fstream"
using namespace Halide;

int main(int argc, char **argv) {
    const int width = 648;
    const int height = 482;
    Buffer<uint16_t> input(width, height);

    //input:rand_matrix generated by rand_generator.py
    std::ifstream input_file ("/curr/jiajieli/app_halide2heterocl/rand_matrix.txt");
    if (input_file.is_open())
    {     
        for (int x = 0; x < input.width(); x++){
            for (int y = 0; y < input.height(); y++){
                input_file >> input(x,y); 
            }
        }
    }   
    
    Var x("x"), y("y");
    
    Func blur_x("blur_x");
    blur_x(x, y) = (input(x, y) + input(x+1, y) + input(x+2, y))/3;

    Func blur_y("blur_y");
    blur_y(x, y) = (blur_x(x, y) + blur_x(x, y+1) + blur_x(x, y+2))/3;

    Buffer<uint16_t> output(input.width() - 8, input.height() - 2);
    blur_y.realize(output);

    std::ofstream outfile ("/curr/jiajieli/app_halide2heterocl/halide_out.txt");
    if (!outfile)
    {
        std::cout << "can't open" << std::endl;
    }
    else
    {
        for (int x = 0; x < output.width(); x++) {
            for (int y = 0; y < output.height(); y++) {
                outfile << output(x, y) << '\t';
            }
            outfile << '\n';
        }  
    }

    blur_y.compile_to_c("blur.c", {input}, "blur");
    blur_y.compile_to_lowered_stmt("blur.stmt", {input}, Text);
    blur_y.compile_to_lowered_stmt("blur.html", {input}, HTML);
}
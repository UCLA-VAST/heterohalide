import heterocl as hcl
hcl.init()
output_extent_0 = 1524
output_extent_1 = 2548
output_min_0 = 0
output_min_1 = 0
def _all(input, ):
    def initial_0(initial_s0_y, initial_s0_x, input, ):
        return input[initial_s0_y, initial_s0_x]
    initial_0 = hcl.compute(((output_extent_1 + 12), (output_extent_0 + 12), ), lambda initial_s0_y, initial_s0_x, : initial_0(initial_s0_y, initial_s0_x, input, ), name = "initial_0", dtype = hcl.UInt(bits = 16))

    def stage_0_0(stage_0_s0_y, stage_0_s0_x, input, initial, ):
        return ((initial[(stage_0_s0_y + 4), (stage_0_s0_x + 4)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 25)) + ((initial[(stage_0_s0_y + 3), (stage_0_s0_x + 4)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 20)) + ((initial[(stage_0_s0_y + 2), (stage_0_s0_x + 4)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 15)) + ((initial[(stage_0_s0_y + 1), (stage_0_s0_x + 4)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 10)) + ((initial[stage_0_s0_y, (stage_0_s0_x + 4)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 5)) + ((initial[(stage_0_s0_y + 4), (stage_0_s0_x + 3)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 20)) + ((initial[(stage_0_s0_y + 3), (stage_0_s0_x + 3)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 16)) + ((initial[(stage_0_s0_y + 2), (stage_0_s0_x + 3)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 12)) + ((initial[(stage_0_s0_y + 1), (stage_0_s0_x + 3)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 8)) + ((initial[stage_0_s0_y, (stage_0_s0_x + 3)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 4)) + ((initial[(stage_0_s0_y + 4), (stage_0_s0_x + 2)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 15)) + ((initial[(stage_0_s0_y + 3), (stage_0_s0_x + 2)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 12)) + ((initial[(stage_0_s0_y + 2), (stage_0_s0_x + 2)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 9)) + ((initial[(stage_0_s0_y + 1), (stage_0_s0_x + 2)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 6)) + ((initial[stage_0_s0_y, (stage_0_s0_x + 2)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 3)) + ((initial[(stage_0_s0_y + 4), (stage_0_s0_x + 1)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 10)) + ((initial[(stage_0_s0_y + 3), (stage_0_s0_x + 1)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 8)) + ((initial[(stage_0_s0_y + 2), (stage_0_s0_x + 1)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 6)) + ((initial[(stage_0_s0_y + 1), (stage_0_s0_x + 1)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 4)) + ((initial[stage_0_s0_y, (stage_0_s0_x + 1)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 2)) + ((initial[(stage_0_s0_y + 4), stage_0_s0_x] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 5)) + ((initial[(stage_0_s0_y + 3), stage_0_s0_x] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 4)) + ((initial[(stage_0_s0_y + 2), stage_0_s0_x] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 3)) + (initial[stage_0_s0_y, stage_0_s0_x] + (initial[(stage_0_s0_y + 1), stage_0_s0_x] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 2))))))))))))))))))))))))))
    stage_0_0 = hcl.compute(((output_extent_1 + 8), (output_extent_0 + 8), ), lambda stage_0_s0_y, stage_0_s0_x, : stage_0_0(stage_0_s0_y, stage_0_s0_x, input, initial_0, ), name = "stage_0_0", dtype = hcl.UInt(bits = 16))

    def stage_1_0(stage_1_s0_y, stage_1_s0_x, input, stage_0, ):
        return ((stage_0[(stage_1_s0_y + 4), (stage_1_s0_x + 4)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 25)) + ((stage_0[(stage_1_s0_y + 3), (stage_1_s0_x + 4)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 20)) + ((stage_0[(stage_1_s0_y + 2), (stage_1_s0_x + 4)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 15)) + ((stage_0[(stage_1_s0_y + 1), (stage_1_s0_x + 4)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 10)) + ((stage_0[stage_1_s0_y, (stage_1_s0_x + 4)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 5)) + ((stage_0[(stage_1_s0_y + 4), (stage_1_s0_x + 3)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 20)) + ((stage_0[(stage_1_s0_y + 3), (stage_1_s0_x + 3)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 16)) + ((stage_0[(stage_1_s0_y + 2), (stage_1_s0_x + 3)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 12)) + ((stage_0[(stage_1_s0_y + 1), (stage_1_s0_x + 3)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 8)) + ((stage_0[stage_1_s0_y, (stage_1_s0_x + 3)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 4)) + ((stage_0[(stage_1_s0_y + 4), (stage_1_s0_x + 2)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 15)) + ((stage_0[(stage_1_s0_y + 3), (stage_1_s0_x + 2)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 12)) + ((stage_0[(stage_1_s0_y + 2), (stage_1_s0_x + 2)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 9)) + ((stage_0[(stage_1_s0_y + 1), (stage_1_s0_x + 2)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 6)) + ((stage_0[stage_1_s0_y, (stage_1_s0_x + 2)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 3)) + ((stage_0[(stage_1_s0_y + 4), (stage_1_s0_x + 1)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 10)) + ((stage_0[(stage_1_s0_y + 3), (stage_1_s0_x + 1)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 8)) + ((stage_0[(stage_1_s0_y + 2), (stage_1_s0_x + 1)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 6)) + ((stage_0[(stage_1_s0_y + 1), (stage_1_s0_x + 1)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 4)) + ((stage_0[stage_1_s0_y, (stage_1_s0_x + 1)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 2)) + ((stage_0[(stage_1_s0_y + 4), stage_1_s0_x] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 5)) + ((stage_0[(stage_1_s0_y + 3), stage_1_s0_x] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 4)) + ((stage_0[(stage_1_s0_y + 2), stage_1_s0_x] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 3)) + (stage_0[stage_1_s0_y, stage_1_s0_x] + (stage_0[(stage_1_s0_y + 1), stage_1_s0_x] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 2))))))))))))))))))))))))))
    stage_1_0 = hcl.compute(((output_extent_1 + 4), (output_extent_0 + 4), ), lambda stage_1_s0_y, stage_1_s0_x, : stage_1_0(stage_1_s0_y, stage_1_s0_x, input, stage_0_0, ), name = "stage_1_0", dtype = hcl.UInt(bits = 16))

    def output_0(output_s0_y, output_s0_x, input, stage_1, ):
        return ((stage_1[(output_s0_y + 4), (output_s0_x + 4)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 25)) + ((stage_1[(output_s0_y + 3), (output_s0_x + 4)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 20)) + ((stage_1[(output_s0_y + 2), (output_s0_x + 4)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 15)) + ((stage_1[(output_s0_y + 1), (output_s0_x + 4)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 10)) + ((stage_1[output_s0_y, (output_s0_x + 4)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 5)) + ((stage_1[(output_s0_y + 4), (output_s0_x + 3)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 20)) + ((stage_1[(output_s0_y + 3), (output_s0_x + 3)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 16)) + ((stage_1[(output_s0_y + 2), (output_s0_x + 3)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 12)) + ((stage_1[(output_s0_y + 1), (output_s0_x + 3)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 8)) + ((stage_1[output_s0_y, (output_s0_x + 3)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 4)) + ((stage_1[(output_s0_y + 4), (output_s0_x + 2)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 15)) + ((stage_1[(output_s0_y + 3), (output_s0_x + 2)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 12)) + ((stage_1[(output_s0_y + 2), (output_s0_x + 2)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 9)) + ((stage_1[(output_s0_y + 1), (output_s0_x + 2)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 6)) + ((stage_1[output_s0_y, (output_s0_x + 2)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 3)) + ((stage_1[(output_s0_y + 4), (output_s0_x + 1)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 10)) + ((stage_1[(output_s0_y + 3), (output_s0_x + 1)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 8)) + ((stage_1[(output_s0_y + 2), (output_s0_x + 1)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 6)) + ((stage_1[(output_s0_y + 1), (output_s0_x + 1)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 4)) + ((stage_1[output_s0_y, (output_s0_x + 1)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 2)) + ((stage_1[(output_s0_y + 4), output_s0_x] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 5)) + ((stage_1[(output_s0_y + 3), output_s0_x] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 4)) + ((stage_1[(output_s0_y + 2), output_s0_x] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 3)) + (stage_1[output_s0_y, output_s0_x] + (stage_1[(output_s0_y + 1), output_s0_x] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 2))))))))))))))))))))))))))
    output_0 = hcl.compute((output_extent_1, output_extent_0, ), lambda output_s0_y, output_s0_x, : output_0(output_s0_y, output_s0_x, input, stage_1_0, ), name = "output_0", dtype = hcl.UInt(bits = 16))

    return output_0
input = hcl.placeholder((2560, 1536, ), name = "input", dtype = hcl.UInt(bits = 16))
s = hcl.create_schedule([input, ], _all)
s_initial_0 = _all.initial_0
s[s_initial_0].unroll(s_initial_0.axis[1], 128)
s_stage_0_0 = _all.stage_0_0
s[s_stage_0_0].unroll(s_stage_0_0.axis[1], 128)
s_stage_1_0 = _all.stage_1_0
s[s_stage_1_0].unroll(s_stage_1_0.axis[1], 128)
f = hcl.build(s)
print(hcl.lower(s))
import numpy as np
np_input = np.transpose(np.load("input.npy"), (1, 0))
hcl_input = hcl.asarray(np_input, dtype = hcl.UInt(bits = 16))
output_shape = (2548, 1524)
hcl_out = hcl.asarray(np.zeros(output_shape), dtype = hcl.UInt(bits = 16))
f(hcl_input, hcl_out)
np_out = hcl_out.asnumpy()
np_out = np.transpose(np_out, (1, 0))
np.save("output_heterocl.npy", np_out)
print(hcl.build(s, target = "soda"))

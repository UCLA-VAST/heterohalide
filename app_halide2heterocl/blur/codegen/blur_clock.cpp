// On linux, you can compile and run it like so:
// g++ blur.cpp -g -std=c++11 -I /curr/jiajieli/Halide/include -I /curr/jiajieli/Halide/tools -L /curr/jiajieli/Halide/bin -lHalide `libpng-config --cflags --ldflags` -ljpeg -lpthread -ldl -o blur
// LD_LIBRARY_PATH=/curr/jiajieli/Halide/bin /curr/jiajieli/app_halide2heterocl/blur/codegen/blur
#include "Halide.h"
#include "fstream"
using namespace Halide;

int main(int argc, char **argv) {
    ImageParam input(type_of<uint16_t>(), 2);


    // input:rand_matrix generated by rand_generator.py
    // std::ifstream input_file ("/curr/jiajieli/app_halide2heterocl/blur/input_halide.txt");
    // if (input_file.is_open())
    // {     
    //     for (int y = 0; y < input.height(); y++){
    //         for (int x = 0; x < input.width(); x++){
    //             input_file >> input(x,y); 
    //         }
    //     }
    // }   
    

    Var x("x"), y("y");
    
    Func blur_x("blur_x");
    blur_x(x, y) = (input(x, y) + input(x+1, y) + input(x+2, y))/3;

    Func blur_y("blur_y");
    blur_y(x, y) = (blur_x(x, y) + blur_x(x, y+1) + blur_x(x, y+2))/3; 
    // can't use one function here: blur_x(x, y) = (blur_x(x, y) + blur_x(x, y+1) + blur_x(x, y+2)) / 3, if use recursive references, the index need to be the same. It seems to be a demand to protect scheduling
    // Error occured: All of a function's recursive references to itself must contain the same pure variables in the same places as on the left-hand-side.

    // unroll & reorder
    // blur_x.reorder(y, x);

    // blur_x.unroll_hcl(x, 4);
    // blur_y.unroll_hcl(x, 4);
    

    // blur_x.compute_root();
    // blur_y.compute_root();


    Var xi("xi"), yi("yi");
    blur_y.split(y, y, yi, 8).parallel(y).vectorize(x, 8); // vectorize optimizaion should open, otherwise there will be Error
    blur_x.store_at(blur_y, y).compute_at(blur_y, yi).vectorize(x, 8);
    

    blur_y.compile_to_static_library("blur_lib", {input}, "blur");

    // float total_time = float( clock() - begin_time ) / CLOCKS_PER_SEC;
    // std::ofstream clockfile ("clock.txt", std::ios::app);
    // if (clockfile) {
    //     clockfile << total_time << "\t";
    // }
    

    return 0;
}
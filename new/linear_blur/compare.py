import numpy as np 
output_heterocl = np.load("output_heterocl.npy")
output_target = np.load("output_target.npy") # target heterocl code manually written: using Imperative DSL

output_halide_flat = np.loadtxt("output_halide.txt")
output_halide = np.transpose(output_halide_flat.reshape((3, 1278, 766)), (2, 1, 0)) # generated by new linear_blu.cpp: No boundary condition



def dif(a,b):
    return np.sum(np.abs(a - b)) / np.size(a)

print("halide and heterocl: ", dif(output_halide, output_heterocl)) # 0.0001
print("halide and target hcl: ", dif(output_halide, output_target)) # 0.0001




# print("average element dif: (input between 0 to 100)")
# print(dif(output_halide, output_heterocl))

# print("output_heterocl_target shape: ", output_heterocl_target.shape)
# print("average element dif between hcl target and halide: ")
# print(dif(output_halide, output_heterocl_target))
# print("average element dif between hcl target and hcl original: ")
# print(dif(output_heterocl, output_heterocl_target))

# print("output_heterocl_target shape: ", output_heterocl_new_target.shape)
# print("average element dif between hcl new target and halide: ")
# print(dif(output_halide, output_heterocl_new_target))
# print("average element dif between hcl new target and hcl original: ")
# print(dif(output_heterocl, output_heterocl_new_target))


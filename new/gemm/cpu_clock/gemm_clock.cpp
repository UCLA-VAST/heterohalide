// On linux, you can compile and run it like so:
// g++ blur.cpp -g -std=c++11 -I /curr/jiajieli/Halide/include -I /curr/jiajieli/Halide/tools -L /curr/jiajieli/Halide/bin -lHalide `libpng-config --cflags --ldflags` -ljpeg -lpthread -ldl -o blur
// LD_LIBRARY_PATH=/curr/jiajieli/Halide/bin /curr/jiajieli/app_halide2heterocl/blur/codegen/blur
#include "Halide.h"
#include "fstream"
using namespace Halide;

int main(int argc, char **argv) {
    ImageParam A(type_of<int16_t>(), 2);
    ImageParam B(type_of<int16_t>(), 2);


    // input:rand_matrix generated by rand_generator.py
    // std::ifstream input_file ("/curr/jiajieli/app_halide2heterocl/blur/input_halide.txt");
    // if (input_file.is_open())
    // {     
    //     for (int y = 0; y < input.height(); y++){
    //         for (int x = 0; x < input.width(); x++){
    //             input_file >> input(x,y); 
    //         }
    //     }
    // }   
    
    Var x{"x"}, y{"y"};
    Func prod("prod");
    RDom r(0, A.height());
    prod(x, y) += A(x, r) * B(r, y);

    int block_size = 8;

    Var xi("xi"), yi("yi"), xii("xii"), yii("yii");
    RVar ri("ri");

    prod.vectorize(x, 8);
    prod.update() 
        .split(x, x, xi, block_size).split(xi, xi, xii, 8) 
        .split(y, y, yi, block_size).split(yi, yi, yii, 4) 
        .split(r, r, ri, block_size) 
        .reorder(xii, yii, xi, ri, yi, r, x, y) 
        .parallel(y).vectorize(xii).unroll(xi).unroll(yii);
    

    prod.compile_to_static_library("gemm_lib", {A, B}, "gemm");
    

    return 0;
}
#include "Halide.h"
#include <stdio.h>

using namespace Halide;

// We will define a generator to auto-schedule.
class AutoScheduled : public Halide::Generator<AutoScheduled> {
public:
    Input<Buffer<uint16_t>>  input{"input", 2};

    Output<Buffer<uint16_t>> output{"output", 2};

    void generate() {
 

        f(x, y) = input(x, y);

        stages.push_back(f);
        for (int s = 0; s < (int)stencils; s++) {
            Func f("stage_" + std::to_string(s));
            Expr e = cast<uint16_t>(0);
            for (int i = -2; i <= 2; i++) {
                for (int j = -2; j <= 2; j++) {
                    e += ((i+3)*(j+3))*stages.back()(x+i+2, y+j+2);
                }
            }
            f(x, y) = e;
            stages.push_back(f);
        }

        output(x, y) = stages.back()(x, y);

    }

    void schedule() {
        if (auto_schedule) {

            input.dim(0).set_bounds_estimate(0, 1536);
            input.dim(1).set_bounds_estimate(0, 2560);

            output.estimate(x, 0, 1536)
                   .estimate(y, 0, 2560);


        } else {
            // This is where you would declare the schedule you have written by
            // hand or paste the schedule generated by the auto-scheduler.
            // We will use a naive schedule here to compare the performance of
            // the autoschedule with a basic schedule.


            for (size_t i = 1; i < stages.size() - 1; i++) {
                Func s = stages[i];
                s.store_at(output, t).compute_at(output, yi).vectorize(s.args()[0], 16);
            }
            output.compute_root()
                .tile(x, y, xo, yo, xi, yi, 512, 512)
                .fuse(xo, yo, t)
                .parallel(t)
                .vectorize(xi, 16);
                }
    }
private:
    Var x{"x"}, y{"y"};
    Var yi, yo, xo, xi, t;
    Func f;
    std::vector<Func> stages;
    int stencils = 3;
};

// As in lesson 15, we register our generator and then compile this
// file along with tools/GenGen.cpp.
HALIDE_REGISTER_GENERATOR(AutoScheduled, auto_schedule_gen)

// After compiling this file, see how to use it in

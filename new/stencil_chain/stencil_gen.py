import heterocl as hcl
hcl.init()
final_extent_0 = 1524
final_extent_1 = 2548
final_min_0 = 0
final_min_1 = 0
def top(input, ):
    stage_0 = hcl.compute(((final_extent_0 + 8), (final_extent_1 + 8)), lambda x, y: 0, name = "stage_0", dtype = hcl.UInt(bits = 16))
    with hcl.Stage("stage_0"):
        with hcl.for_(final_min_1, (final_extent_1 + 8), name = "stage_0_s0_y") as stage_0_s0_y:
            with hcl.for_(final_min_0, (final_extent_0 + 8), name = "stage_0_s0_x") as stage_0_s0_x:
                stage_0[stage_0_s0_x, stage_0_s0_y] = ((input[(stage_0_s0_x + 4), (stage_0_s0_y + 4)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 25)) + ((input[(stage_0_s0_x + 4), (stage_0_s0_y + 3)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 20)) + ((input[(stage_0_s0_x + 4), (stage_0_s0_y + 2)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 15)) + ((input[(stage_0_s0_x + 4), (stage_0_s0_y + 1)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 10)) + ((input[(stage_0_s0_x + 4), stage_0_s0_y] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 5)) + ((input[(stage_0_s0_x + 3), (stage_0_s0_y + 4)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 20)) + ((input[(stage_0_s0_x + 3), (stage_0_s0_y + 3)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 16)) + ((input[(stage_0_s0_x + 3), (stage_0_s0_y + 2)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 12)) + ((input[(stage_0_s0_x + 3), (stage_0_s0_y + 1)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 8)) + ((input[(stage_0_s0_x + 3), stage_0_s0_y] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 4)) + ((input[(stage_0_s0_x + 2), (stage_0_s0_y + 4)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 15)) + ((input[(stage_0_s0_x + 2), (stage_0_s0_y + 3)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 12)) + ((input[(stage_0_s0_x + 2), (stage_0_s0_y + 2)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 9)) + ((input[(stage_0_s0_x + 2), (stage_0_s0_y + 1)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 6)) + ((input[(stage_0_s0_x + 2), stage_0_s0_y] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 3)) + ((input[(stage_0_s0_x + 1), (stage_0_s0_y + 4)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 10)) + ((input[(stage_0_s0_x + 1), (stage_0_s0_y + 3)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 8)) + ((input[(stage_0_s0_x + 1), (stage_0_s0_y + 2)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 6)) + ((input[(stage_0_s0_x + 1), (stage_0_s0_y + 1)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 4)) + ((input[(stage_0_s0_x + 1), stage_0_s0_y] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 2)) + ((input[stage_0_s0_x, (stage_0_s0_y + 4)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 5)) + ((input[stage_0_s0_x, (stage_0_s0_y + 3)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 4)) + ((input[stage_0_s0_x, (stage_0_s0_y + 2)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 3)) + (input[stage_0_s0_x, stage_0_s0_y] + (input[stage_0_s0_x, (stage_0_s0_y + 1)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 2))))))))))))))))))))))))))
    stage_1 = hcl.compute(((final_extent_0 + 4), (final_extent_1 + 4)), lambda x, y: 0, name = "stage_1", dtype = hcl.UInt(bits = 16))
    with hcl.Stage("stage_1"):
        with hcl.for_(final_min_1, (final_extent_1 + 4), name = "stage_1_s0_y") as stage_1_s0_y:
            with hcl.for_(final_min_0, (final_extent_0 + 4), name = "stage_1_s0_x") as stage_1_s0_x:
                stage_1[stage_1_s0_x, stage_1_s0_y] = ((stage_0[(stage_1_s0_x + 4), (stage_1_s0_y + 4)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 25)) + ((stage_0[(stage_1_s0_x + 4), (stage_1_s0_y + 3)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 20)) + ((stage_0[(stage_1_s0_x + 4), (stage_1_s0_y + 2)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 15)) + ((stage_0[(stage_1_s0_x + 4), (stage_1_s0_y + 1)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 10)) + ((stage_0[(stage_1_s0_x + 4), stage_1_s0_y] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 5)) + ((stage_0[(stage_1_s0_x + 3), (stage_1_s0_y + 4)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 20)) + ((stage_0[(stage_1_s0_x + 3), (stage_1_s0_y + 3)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 16)) + ((stage_0[(stage_1_s0_x + 3), (stage_1_s0_y + 2)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 12)) + ((stage_0[(stage_1_s0_x + 3), (stage_1_s0_y + 1)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 8)) + ((stage_0[(stage_1_s0_x + 3), stage_1_s0_y] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 4)) + ((stage_0[(stage_1_s0_x + 2), (stage_1_s0_y + 4)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 15)) + ((stage_0[(stage_1_s0_x + 2), (stage_1_s0_y + 3)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 12)) + ((stage_0[(stage_1_s0_x + 2), (stage_1_s0_y + 2)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 9)) + ((stage_0[(stage_1_s0_x + 2), (stage_1_s0_y + 1)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 6)) + ((stage_0[(stage_1_s0_x + 2), stage_1_s0_y] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 3)) + ((stage_0[(stage_1_s0_x + 1), (stage_1_s0_y + 4)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 10)) + ((stage_0[(stage_1_s0_x + 1), (stage_1_s0_y + 3)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 8)) + ((stage_0[(stage_1_s0_x + 1), (stage_1_s0_y + 2)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 6)) + ((stage_0[(stage_1_s0_x + 1), (stage_1_s0_y + 1)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 4)) + ((stage_0[(stage_1_s0_x + 1), stage_1_s0_y] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 2)) + ((stage_0[stage_1_s0_x, (stage_1_s0_y + 4)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 5)) + ((stage_0[stage_1_s0_x, (stage_1_s0_y + 3)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 4)) + ((stage_0[stage_1_s0_x, (stage_1_s0_y + 2)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 3)) + (stage_0[stage_1_s0_x, stage_1_s0_y] + (stage_0[stage_1_s0_x, (stage_1_s0_y + 1)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 2))))))))))))))))))))))))))
    stage_2 = hcl.compute((final_extent_0, final_extent_1), lambda x, y: 0, name = "stage_2", dtype = hcl.UInt(bits = 16))
    with hcl.Stage("stage_2"):
        with hcl.for_(final_min_1, final_extent_1, name = "stage_2_s0_y") as stage_2_s0_y:
            with hcl.for_(final_min_0, final_extent_0, name = "stage_2_s0_x") as stage_2_s0_x:
                stage_2[stage_2_s0_x, stage_2_s0_y] = ((stage_1[(stage_2_s0_x + 4), (stage_2_s0_y + 4)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 25)) + ((stage_1[(stage_2_s0_x + 4), (stage_2_s0_y + 3)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 20)) + ((stage_1[(stage_2_s0_x + 4), (stage_2_s0_y + 2)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 15)) + ((stage_1[(stage_2_s0_x + 4), (stage_2_s0_y + 1)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 10)) + ((stage_1[(stage_2_s0_x + 4), stage_2_s0_y] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 5)) + ((stage_1[(stage_2_s0_x + 3), (stage_2_s0_y + 4)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 20)) + ((stage_1[(stage_2_s0_x + 3), (stage_2_s0_y + 3)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 16)) + ((stage_1[(stage_2_s0_x + 3), (stage_2_s0_y + 2)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 12)) + ((stage_1[(stage_2_s0_x + 3), (stage_2_s0_y + 1)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 8)) + ((stage_1[(stage_2_s0_x + 3), stage_2_s0_y] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 4)) + ((stage_1[(stage_2_s0_x + 2), (stage_2_s0_y + 4)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 15)) + ((stage_1[(stage_2_s0_x + 2), (stage_2_s0_y + 3)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 12)) + ((stage_1[(stage_2_s0_x + 2), (stage_2_s0_y + 2)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 9)) + ((stage_1[(stage_2_s0_x + 2), (stage_2_s0_y + 1)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 6)) + ((stage_1[(stage_2_s0_x + 2), stage_2_s0_y] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 3)) + ((stage_1[(stage_2_s0_x + 1), (stage_2_s0_y + 4)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 10)) + ((stage_1[(stage_2_s0_x + 1), (stage_2_s0_y + 3)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 8)) + ((stage_1[(stage_2_s0_x + 1), (stage_2_s0_y + 2)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 6)) + ((stage_1[(stage_2_s0_x + 1), (stage_2_s0_y + 1)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 4)) + ((stage_1[(stage_2_s0_x + 1), stage_2_s0_y] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 2)) + ((stage_1[stage_2_s0_x, (stage_2_s0_y + 4)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 5)) + ((stage_1[stage_2_s0_x, (stage_2_s0_y + 3)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 4)) + ((stage_1[stage_2_s0_x, (stage_2_s0_y + 2)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 3)) + (stage_1[stage_2_s0_x, stage_2_s0_y] + (stage_1[stage_2_s0_x, (stage_2_s0_y + 1)] * hcl.cast(dtype = hcl.UInt(bits = 16), expr = 2))))))))))))))))))))))))))
    final = hcl.compute((1524, 2548), lambda x, y: 0, name = "final", dtype = hcl.UInt(bits = 16))
    with hcl.Stage("final"):
        with hcl.for_(final_min_1, final_extent_1, name = "final_s0_y") as final_s0_y:
            with hcl.for_(final_min_0, final_extent_0, name = "final_s0_x") as final_s0_x:
                final[final_s0_x, final_s0_y] = stage_2[final_s0_x, final_s0_y]
    return final
input = hcl.placeholder((1536, 2560, ), name = "input", dtype = hcl.UInt(bits = 16))
s = hcl.create_schedule([input, ], top)
f = hcl.build(s)
print(hcl.lower(s))
import numpy as np
np_input = np.load("input.npy")
hcl_input = hcl.asarray(np_input, dtype = hcl.UInt(bits = 16))
output_shape = (1524, 2548, )
hcl_out = hcl.asarray(np.zeros(output_shape), dtype = hcl.UInt(bits = 16))
f(hcl_input, hcl_out)
np_out = hcl_out.asnumpy()
np.save("output_heterocl.npy", np_out)
print(hcl.build(s, target = "soda"))

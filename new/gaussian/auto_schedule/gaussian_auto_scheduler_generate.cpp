#include "Halide.h"
#include <stdio.h>

using namespace Halide;

// We will define a generator to auto-schedule.
class AutoScheduled : public Halide::Generator<AutoScheduled> {
public:
    Input<Buffer<uint8_t>>  input{"input", 2};

    Output<Buffer<uint8_t>> output{"output", 2};

    void generate() {
 
        RDom win2(0, 9, 0, 9); // ori: -4, 9, -4, 9: -4~4, -4~4


        float sigma = 1.5f;

        kernel_f(x) = exp(-x*x/(2*sigma*sigma)) / (sqrtf(2*M_PI)*sigma);

        // Normalize and convert to 8bit fixed point.
        // Kernel values will inlined into  the blurring kernel as constant
        kernel(x) = cast<uint8_t>(kernel_f(x) * 255 /
                                    (kernel_f(0) + kernel_f(1)*2 + kernel_f(2)*2
                                    + kernel_f(3)*2 + kernel_f(4)*2));

        // 2D filter: direct map
        sum_x(x, y) += cast<uint32_t>(input(x + win2.x, y + win2.y)) * kernel(win2.x - 4) * kernel(win2.y - 4); // shape: -8, -8
        blur_x(x, y) = cast<uint8_t>(sum_x(x, y) >> 16); // divided by 65536(2**16)

        hw_output(x, y) = blur_x(x, y);
        output(x, y) = hw_output(x, y);

    }

    void schedule() {
        if (auto_schedule) {

            input.dim(0).set_bounds_estimate(0, 1000);
            input.dim(1).set_bounds_estimate(0, 1500);

            output.estimate(x, 0, 1000)
                   .estimate(y, 0, 1500);


        } else {
            // This is where you would declare the schedule you have written by
            // hand or paste the schedule generated by the auto-scheduler.
            // We will use a naive schedule here to compare the performance of
            // the autoschedule with a basic schedule.

            output.tile(x, y, xo, yo, xi, yi, 256, 64)
                    .vectorize(xi, 8)
                    .fuse(xo, yo, xo).parallel(xo);
        }
    }
private:
    Var x{"x"}, y{"y"}, z{"z"}, c{"c"};
    Var xo{"xo"}, yo{"yo"}, xi{"xi"}, yi{"yi"};
    Func kernel_f{"kernel_f"}, kernel{"kernel"}, blur_x{"blur_x"};
    Func hw_output{"hw_output"};
    Func sum_x{"sum_x"};


};

// As in lesson 15, we register our generator and then compile this
// file along with tools/GenGen.cpp.
HALIDE_REGISTER_GENERATOR(AutoScheduled, auto_schedule_gen)

// After compiling this file, see how to use it in
